name: Integration-test-with-terratest-for-AWS

on:
  schedule:
    - cron: 0 15 * * *

jobs:
  terratest:
    name: Terratest
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VERSION: 0.14.7
      DOCKER_REGISTRY_PASSWORD: ${{ secrets.CR_PAT }}
      DOCKER_REGISTRY_USERNAME: scalar-git
      DOCKER_REGISTRY_SERVER: ghcr.io
      TERRATEST_ID: terratest-001
    defaults:
      run:
        working-directory: ./test

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 8
          java-package: jre

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Docker login
        run: echo ${DOCKER_REGISTRY_PASSWORD} | docker login -u ${DOCKER_REGISTRY_USERNAME} --password-stdin ${DOCKER_REGISTRY_SERVER}

      - name: Download scalardl client sdk
        run: |
          curl -L https://github.com/scalar-labs/scalardl-java-client-sdk/archive/v${SCALARDL_JAVA_CLIENT_SDK_VERSION}.tar.gz | tar xvzf -
          mv ./scalardl-java-client-sdk-${SCALARDL_JAVA_CLIENT_SDK_VERSION} ./scalardl-java-client-sdk
        env:
          SCALARDL_JAVA_CLIENT_SDK_VERSION: 2.1.0
        working-directory: ./test/src/integration

      - name: Set up GO
        uses: actions/setup-go@v1
        with:
          go-version: 1.15.5
        id: go

      - name: Checkout scalar-terraform-examples
        uses: actions/checkout@v2
        with:
          repository: scalar-labs/scalar-terraform-examples
          ref: main
          path: ./test/modules

      - name: Copy custom terraform.tfvars
        run: |
          paths=(network cassandra scalardl monitor)
          for d in "${paths[@]}"; do cp config/terraform/aws/${d}/terraform.tfvars ./modules/aws/${d}/; done

      - name: Create ssh key
        run: |
          ssh-keygen -N "" -t rsa -f test_key <<<y
          chmod 600 test_key
        working-directory: ./test/modules

      - name: Install terratest modules and run terratest
        run: |
          export GOPATH=$(pwd)
          export GOBIN=${GOPATH}/bin
          export PATH=${PATH}:${GOBIN}
          eval `ssh-agent`
          ssh-add ./modules/test_key
          mkdir -p ${GOBIN}
          curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
          cd ${GITHUB_WORKSPACE}/test/src/modules && dep ensure
          cd ${GITHUB_WORKSPACE}/test/src/integration && dep ensure
          go test -run TestEndToEndTerraform -timeout 120m -args -directory="../../modules/" -cloud_provider="aws"

      - name: Create jira issue
        if: failure()
        uses: ./.github/actions/create-jira-issue
        env:
          TEST_ENVIRONMENT: "AWS"
          JIRA_AUTH: ${{ secrets.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}
          JIRA_ISSUE_DESCRIPTION: ${{ job.status }}
          JIRA_ASSIGNEE_ID: 5dede50273b0bd0e4d82e164 # Boney

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_CHANNEL: eng-notification
          SLACK_COLOR: danger
          SLACK_MESSAGE: ${{ job.status }}
          SLACK_TITLE: Integration test for AWS
          SLACK_USERNAME: github-actions[bot]
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Verification dashboard update failure status
        if: ${{ failure() }}
        uses: ./.github/actions/update-verification-dashboard
        env:
          TEST_ID: ${{ env.TERRATEST_ID }}
          TEST_STATUS: "false"
          TEST_ENVIRONMENT: "AWS"
          AUTOMATE_TOOL_TOKEN: ${{ secrets.AUTOMATE_TOOL_TOKEN }}
          
      - name: Verification dashboard update success status
        if: ${{ !failure() }}
        uses: ./.github/actions/update-verification-dashboard
        env:
          TEST_ID: ${{ env.TERRATEST_ID }}
          TEST_STATUS: "true"
          TEST_ENVIRONMENT: "AWS"
          AUTOMATE_TOOL_TOKEN: ${{ secrets.AUTOMATE_TOOL_TOKEN }}
